<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style TargetType="Window" x:Key="windowStyle">
        <Setter Property="Background" Value="#2f2f2f"/>
        <!-- You can set any color or brush here -->
        <Setter Property="Foreground" Value="WhiteSmoke"/>
        <Setter Property="BorderBrush" Value="#676767"/>
        <!-- Optional: Change the text color in the window -->
    </Style>


    <Style TargetType="Grid" x:Key="gridStyle">
        <Setter Property="Background" Value="#2f2f2f"/>
    </Style>

    <Style TargetType="TabControl" x:Key="tabControlStyle">
        <Setter Property="Background" Value="#2f2f2f"/>
        <Setter Property="BorderBrush" Value="#676767"/>
    </Style>

    <Style TargetType="TabItem" x:Key="tabItemStyle">
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Grid Name="Panel">
                        <ContentPresenter x:Name="ContentSite"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="Center"
                                  ContentSource="Header"
                                  Margin="10,2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- Change the background and text color when the TabItem is selected -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Panel" Property="Background" Value="#3b5b3a" />
                            
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                        <!-- Change the background and text color when the TabItem is not selected -->
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Panel" Property="Background" Value="Black" />
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!-- Style for TextBox (applies to text input fields) -->
    <Style TargetType="TextBox" x:Key="txtInputStyle">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Height" Value="23"/>
        <Setter Property="Background" Value="#171717"/>
        <Setter Property="Foreground" Value="#ffffff"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Width" Value="187"/>
        <Setter Property="TextWrapping" Value="Wrap"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="1">
                        <!-- The ScrollViewer should include ContentElement for the text input to work -->
                        <ScrollViewer x:Name="PART_ContentHost" 
                                  Margin="0"
                                  VerticalScrollBarVisibility="Auto"
                                  HorizontalScrollBarVisibility="Hidden"
                                  Focusable="False"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Style for Button (applies to buttons) -->
    <Style TargetType="Button" x:Key="btnPrimaryStyle">
        <Setter Property="Background" Value="#2f2f2f"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Foreground" Value="WhiteSmoke"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="23"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        
        <Setter Property="VerticalAlignment" Value="Top"/>

        <!-- Define a ControlTemplate to manage the visual layout -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" 
                                      VerticalAlignment="Center" 
                                      Content="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Define a trigger for mouse-over hover effect -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#b91c1c"/>
                <!-- Change background color on hover -->
                <Setter Property="BorderBrush" Value="DarkBlue"/>
                <!-- Optional: change border color on hover -->
                <Setter Property="Foreground" Value="White"/>
                <!-- Optional: change text color on hover -->
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Style for TextBlock (for status and labels) -->
    <Style TargetType="TextBlock" x:Key="tbStatusLabelStyle">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="lbApiToken">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <!-- Style for CheckBox -->
    <Style TargetType="CheckBox" x:Key="chkBoxStyle">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Foreground" Value="WhiteSmoke"/>
    </Style>

    <!-- Style for DataGrid -->
    <Style TargetType="DataGrid" x:Key="dataGridStyle">
        <Setter Property="Margin" Value="10,10,10,10"/>
        
        <Setter Property="AutoGenerateColumns" Value="False"/>
    </Style>

    <Style TargetType="Label" x:Key="labelDg">
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="Foreground" Value="Gray"/>
    </Style>

    <Style TargetType="Button" x:Key="btnSaveAs">
        <Setter Property="Background" Value="#2f2f2f"/>
        <Setter Property="BorderBrush" Value="#9b9b9b"/>
        <Setter Property="Foreground" Value="WhiteSmoke"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="23"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="1">
                        <ContentPresenter HorizontalAlignment="Center" 
                                      VerticalAlignment="Center" 
                                      Content="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Define a trigger for mouse-over hover effect -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#b91c1c"/>
                <!-- Change background color on hover -->
                <Setter Property="BorderBrush" Value="DarkBlue"/>
                <!-- Optional: change border color on hover -->
                <Setter Property="Foreground" Value="White"/>
                <!-- Optional: change text color on hover -->
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TextBox" x:Key="txtSocialInput">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="17"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextAlignment" Value="Center"/>
    </Style>

    <Style TargetType="Button" x:Key="btnSocialQuery">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Background" Value="#2f2f2f"/>
        <Setter Property="Foreground" Value="AntiqueWhite"/>
        <Setter Property="FontSize" Value="17"/>

        <!-- Define a ControlTemplate to manage the visual layout -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="0.5">
                        <ContentPresenter HorizontalAlignment="Center" 
                                      VerticalAlignment="Center" 
                                      Content="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Define a trigger for mouse-over hover effect -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#b91c1c"/>
                <!-- Change background color on hover -->
                <Setter Property="BorderBrush" Value="DarkBlue"/>
                <!-- Optional: change border color on hover -->
                <Setter Property="Foreground" Value="White"/>
                <!-- Optional: change text color on hover -->
            </Trigger>
        </Style.Triggers>

    </Style>

</ResourceDictionary>
